substitutions:
  name: "plug-in_box"

esphome:
  name: ${name}

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:

ota:
  password: "585353d758e3f126d2f4982f0695d956"
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: ${name}
    password: "g0MuFWdXxO2k"

web_server:
  port: 80

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_user
  password: !secret mqtt_password
  discovery: true
  discovery_prefix: homeassistant

captive_portal:

i2c:
  - id: bus_a
    sda: 21
    scl: 22
    scan: true

uart:
  rx_pin: GPIO13
  tx_pin: GPIO12
  baud_rate: 9600

sensor:
  - platform: wifi_signal
    name: ${name}_WiFi_Signal
    update_interval: 60s    

  - platform: mqtt_subscribe
    name: "CO2 Threshold High"
    id: mqtt_topic_high
    topic: co2/threshold/high
    on_value:
        then:
          - logger.log:
              format: "CO2 Threshold High value %.1f"
              args: [ 'id(mqtt_topic_high).state' ]     
          - lambda: |-
              id(mqtt_threshold_high) = id(mqtt_topic_high).state;
              ESP_LOGD("mqtt_threshold_high", "Neuer CO2-Schwellwert fuer HIGH gesetzt: %.2f", id(mqtt_threshold_high));              

  - platform: mqtt_subscribe
    name: "CO2 Threshold Middle"
    id: mqtt_topic_middle
    topic: co2/threshold/middle
    on_value:
        then:
          - logger.log:
              format: "CO2 Threshold Middle value %.1f"
              args: [ 'id(mqtt_topic_middle).state' ]     
          - lambda: |-
              id(mqtt_threshold_middle) = id(mqtt_topic_middle).state;
              ESP_LOGD("mqtt_threshold_middle", "Neuer CO2-Schwellwert fuer MIDDLE gesetzt: %.2f", id(mqtt_threshold_middle));              

  - platform: bme280_i2c
    i2c_id: bus_a
    address: 0x76
    update_interval: 10s
    temperature:
      name: ${name}_Temperature
      id: temperature
      accuracy_decimals: 1
      state_topic: plug-in-box/temperature
    pressure:
      name: ${name}_Pressure
      id: pressure
      state_topic: plug-in-box/pressure
    humidity:
      name: ${name}_Humidity
      id: humidity
      state_topic: plug-in-box/humidity

  - platform: adc
    pin: GPIO32
    name: ${name}_Illuminance
    id: illuminance
    accuracy_decimals: 0
    update_interval: 10s
    filters: 
      - lambda: return std::max(std::min(x * 100.0, 100.0), 0.0);
    on_value:
      then:
        - logger.log:
            format: "_Illuminance changed, value %.1f"
            args: [ 'id(illuminance).state' ]
        - lambda: |-
            float brightness_local = (id(illuminance).state) / 100.0f;
            if (brightness_local < 0.2f) {
              brightness_local = 0.2f;
            }
            id(brightness_neopixel) = brightness_local;
            ESP_LOGD("brightness neopixel", "Helligkeit der Neopixel gesetzt: %.1f", id(brightness_neopixel));              

  - platform: mhz19
    co2:
      name: ${name}_CO2
      id: co2
      state_topic: plug-in-box/co2
      on_value:
        then:
          - logger.log:
              format: "MHZ19 reports co2 value %.1f"
              args: [ 'id(co2).state' ]     
          - if:
              condition:
                lambda: |-
                  return (id(co2).state < id(mqtt_threshold_middle));
              then:
                - logger.log: "CO2-Wert ist im niedrigen Bereich"
                - light.turn_on:
                    id: neopixel
                    brightness: !lambda return id(brightness_neopixel);
                    red: 0%
                    green: 100%
                    blue: 0%    
          - if:
              condition:
                lambda: |-
                  return ( (id(co2).state > id(mqtt_threshold_middle))  && (id(co2).state < id(mqtt_threshold_high)) );
              then:
                - logger.log: "CO2-Wert ist im mittleren Bereich"
                - light.turn_on:
                    id: neopixel
                    brightness: !lambda return id(brightness_neopixel);
                    red: 0%
                    green: 0%
                    blue: 100%    
          - if:
              condition:
                lambda: |-
                  return  (id(co2).state > id(mqtt_threshold_high));
              then:
                - logger.log: "CO2-Wert ist im hohen Bereich"
                - light.turn_on:
                    id: neopixel
                    brightness: 100%
                    red: 100%
                    green: 0%
                    blue: 0%    
    update_interval: 10s
    automatic_baseline_calibration: false    

binary_sensor:
  - platform: gpio
    pin: GPIO25
    name: ${name}_Motion
    id: motion
    device_class: motion

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: GPIO27
    num_leds: 1
    name: ${name}_NeoPixel
    id: neopixel
    on_turn_on:
      then:
        - logger.log:
            format: "Neopixel brightness value %.2f"
            args: [ 'id(neopixel).current_values.get_brightness()' ]        

globals:
  - id: mqtt_threshold_middle
    type: float
    initial_value: 600.0f

  - id: mqtt_threshold_high
    type: float
    initial_value: 1200.0f

  - id: brightness_neopixel
    type: float
    restore_value: no
    initial_value: '0.3'    

interval:
  - interval: 10s
    then:
      - lambda: |-
          ESP_LOGD("mqtt", "MQTT-Wert mqtt_threshold_high aktualisiert: %.2f", id(mqtt_threshold_high));
          ESP_LOGD("mqtt", "MQTT-Wert mqtt_threshold_middle aktualisiert: %.2f", id(mqtt_threshold_middle));
          ESP_LOGD("mqtt", "MQTT-Wert mqtt_topic_high %.f", id(mqtt_topic_high).state );
          ESP_LOGD("mqtt", "MQTT-Wert mqtt_topic_middle %.f", id(mqtt_topic_middle).state );
